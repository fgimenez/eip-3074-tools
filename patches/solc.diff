diff --git a/libevmasm/Instruction.cpp b/libevmasm/Instruction.cpp
index 174d12b5e..cfd0d85a8 100644
--- a/libevmasm/Instruction.cpp
+++ b/libevmasm/Instruction.cpp
@@ -167,6 +167,8 @@ std::map<std::string, Instruction> const solidity::evmasm::c_instructions =
 	{ "CALL", Instruction::CALL },
 	{ "CALLCODE", Instruction::CALLCODE },
 	{ "STATICCALL", Instruction::STATICCALL },
+	{ "AUTH", Instruction::AUTH },
+	{ "AUTHCALL", Instruction::AUTHCALL },
 	{ "RETURN", Instruction::RETURN },
 	{ "DELEGATECALL", Instruction::DELEGATECALL },
 	{ "CREATE2", Instruction::CREATE2 },
@@ -318,6 +320,8 @@ static std::map<Instruction, InstructionInfo> const c_instructionInfo =
 	{ Instruction::RETURN,		{ "RETURN",			0, 2, 0, true, Tier::Zero } },
 	{ Instruction::DELEGATECALL,	{ "DELEGATECALL",	0, 6, 1, true, Tier::Special } },
 	{ Instruction::STATICCALL,	{ "STATICCALL",		0, 6, 1, true, Tier::Special } },
+	{ Instruction::AUTH,        { "AUTH",			0, 3, 1, true, Tier::Special } },
+	{ Instruction::AUTHCALL,    { "AUTHCALL",		0, 7, 1, true, Tier::Special } },
 	{ Instruction::CREATE2,		{ "CREATE2",		0, 4, 1, true, Tier::Special } },
 	{ Instruction::REVERT,		{ "REVERT",		0, 2, 0, true, Tier::Zero } },
 	{ Instruction::INVALID,		{ "INVALID",		0, 0, 0, true, Tier::Zero } },
diff --git a/libevmasm/Instruction.h b/libevmasm/Instruction.h
index 2fddb11d8..b80a8b9d7 100644
--- a/libevmasm/Instruction.h
+++ b/libevmasm/Instruction.h
@@ -183,6 +183,8 @@ enum class Instruction: uint8_t
 	RETURN,				///< halt execution returning output data
 	DELEGATECALL,		///< like CALLCODE but keeps caller's value and sender
 	CREATE2 = 0xf5,		///< create new account with associated code at address `sha3(0xff + sender + salt + init code) % 2**160`
+	AUTH = 0xf6,        ///< authenticate an authorized account for the `AUTHCALL` instruction
+	AUTHCALL = 0xf7,    ///< message-call into an account with authentication for acting as an EOA
 	STATICCALL = 0xfa,	///< like CALL but disallow state modifications

 	REVERT = 0xfd,		///< halt execution, revert state and return output data
diff --git a/libevmasm/SemanticInformation.cpp b/libevmasm/SemanticInformation.cpp
index 1971d9d45..79ab7b29d 100644
--- a/libevmasm/SemanticInformation.cpp
+++ b/libevmasm/SemanticInformation.cpp
@@ -104,10 +104,22 @@ std::vector<SemanticInformation::Operation> SemanticInformation::readWriteOperat
 		op.lengthParameter = 2;
 		return {op};
 	}
+	case Instruction::AUTH:
+	{
+		assertThrow(memory(_instruction) == Effect::Read, OptimizerException, "");
+		assertThrow(storage(_instruction) == Effect::None, OptimizerException, "");
+		Operation op;
+		op.effect = memory(_instruction);
+		op.location = Location::Memory;
+		op.startParameter = 1;
+		op.lengthParameter = 2;
+		return {op};
+	}
 	case Instruction::STATICCALL:
 	case Instruction::CALL:
 	case Instruction::CALLCODE:
 	case Instruction::DELEGATECALL:
+	case Instruction::AUTHCALL:
 	{
 		size_t paramCount = static_cast<size_t>(instructionInfo(_instruction, langutil::EVMVersion()).args);
 		std::vector<Operation> operations{
diff --git a/libsolidity/analysis/TypeChecker.cpp b/libsolidity/analysis/TypeChecker.cpp
index 5c28d3cd2..13303a9db 100644
--- a/libsolidity/analysis/TypeChecker.cpp
+++ b/libsolidity/analysis/TypeChecker.cpp
@@ -1453,7 +1453,8 @@ void TypeChecker::endVisit(ExpressionStatement const& _statement)
 				kind == FunctionType::Kind::BareCall ||
 				kind == FunctionType::Kind::BareCallCode ||
 				kind == FunctionType::Kind::BareDelegateCall ||
-				kind == FunctionType::Kind::BareStaticCall
+				kind == FunctionType::Kind::BareStaticCall ||
+				kind == FunctionType::Kind::BareAuthCall
 			)
 				m_errorReporter.warning(9302_error, _statement.location(), "Return value of low-level calls not used.");
 			else if (kind == FunctionType::Kind::Send)
@@ -2543,7 +2544,8 @@ void TypeChecker::typeCheckFunctionGeneralChecks(
 				_functionType->kind() == FunctionType::Kind::BareCall ||
 				_functionType->kind() == FunctionType::Kind::BareCallCode ||
 				_functionType->kind() == FunctionType::Kind::BareDelegateCall ||
-				_functionType->kind() == FunctionType::Kind::BareStaticCall
+				_functionType->kind() == FunctionType::Kind::BareStaticCall ||
+				_functionType->kind() == FunctionType::Kind::BareAuthCall
 			)
 			{
 				solAssert(!isVariadic, "");
@@ -2672,7 +2674,8 @@ void TypeChecker::typeCheckFunctionGeneralChecks(
 					_functionType->kind() == FunctionType::Kind::BareCall ||
 					_functionType->kind() == FunctionType::Kind::BareCallCode ||
 					_functionType->kind() == FunctionType::Kind::BareDelegateCall ||
-					_functionType->kind() == FunctionType::Kind::BareStaticCall
+					_functionType->kind() == FunctionType::Kind::BareStaticCall ||
+					_functionType->kind() == FunctionType::Kind::BareAuthCall
 				)
 					return {
 						8051_error,
@@ -2967,7 +2970,8 @@ bool TypeChecker::visit(FunctionCallOptions const& _functionCallOptions)
 		kind != FunctionType::Kind::BareCall &&
 		kind != FunctionType::Kind::BareCallCode &&
 		kind != FunctionType::Kind::BareDelegateCall &&
-		kind != FunctionType::Kind::BareStaticCall
+		kind != FunctionType::Kind::BareStaticCall &&
+		kind != FunctionType::Kind::BareAuthCall
 	)
 	{
 		m_errorReporter.fatalTypeError(
diff --git a/libsolidity/ast/Types.cpp b/libsolidity/ast/Types.cpp
index 7b3e42143..84dc33166 100644
--- a/libsolidity/ast/Types.cpp
+++ b/libsolidity/ast/Types.cpp
@@ -558,7 +558,8 @@ MemberList::MemberMap AddressType::nativeMembers(ASTNode const*) const
 		{"call", TypeProvider::function(strings{"bytes memory"}, strings{"bool", "bytes memory"}, FunctionType::Kind::BareCall, StateMutability::Payable)},
 		{"callcode", TypeProvider::function(strings{"bytes memory"}, strings{"bool", "bytes memory"}, FunctionType::Kind::BareCallCode, StateMutability::Payable)},
 		{"delegatecall", TypeProvider::function(strings{"bytes memory"}, strings{"bool", "bytes memory"}, FunctionType::Kind::BareDelegateCall, StateMutability::NonPayable)},
-		{"staticcall", TypeProvider::function(strings{"bytes memory"}, strings{"bool", "bytes memory"}, FunctionType::Kind::BareStaticCall, StateMutability::View)}
+		{"staticcall", TypeProvider::function(strings{"bytes memory"}, strings{"bool", "bytes memory"}, FunctionType::Kind::BareStaticCall, StateMutability::View)},
+		{"authcall", TypeProvider::function(strings{"bytes memory"}, strings{"bool", "bytes memory"}, FunctionType::Kind::BareAuthCall, StateMutability::Payable)}
 	};
 	if (m_stateMutability == StateMutability::Payable)
 	{
@@ -3006,7 +3007,8 @@ TypePointers FunctionType::returnParameterTypesWithoutDynamicTypes() const
 		m_kind == Kind::BareCall ||
 		m_kind == Kind::BareCallCode ||
 		m_kind == Kind::BareDelegateCall ||
-		m_kind == Kind::BareStaticCall
+		m_kind == Kind::BareStaticCall ||
+		m_kind == Kind::BareAuthCall
 	)
 		for (auto& param: returnParameterTypes)
 		{
@@ -3043,6 +3045,7 @@ std::string FunctionType::richIdentifier() const
 	case Kind::BareCallCode: id += "barecallcode"; break;
 	case Kind::BareDelegateCall: id += "baredelegatecall"; break;
 	case Kind::BareStaticCall: id += "barestaticcall"; break;
+	case Kind::BareAuthCall: id += "bareauthcall"; break;
 	case Kind::Creation: id += "creation"; break;
 	case Kind::Send: id += "send"; break;
 	case Kind::Transfer: id += "transfer"; break;
@@ -3285,6 +3288,7 @@ std::vector<std::tuple<std::string, Type const*>> FunctionType::makeStackItems()
 	case Kind::BareCallCode:
 	case Kind::BareDelegateCall:
 	case Kind::BareStaticCall:
+	case Kind::BareAuthCall:
 	case Kind::Transfer:
 	case Kind::Send:
 		slots = {std::make_tuple("address", TypeProvider::address())};
@@ -3380,6 +3384,7 @@ MemberList::MemberMap FunctionType::nativeMembers(ASTNode const* _scope) const
 	case Kind::BareCallCode:
 	case Kind::BareDelegateCall:
 	case Kind::BareStaticCall:
+	case Kind::BareAuthCall:
 	{
 		MemberList::MemberMap members;
 		if (m_kind == Kind::External)
@@ -3587,6 +3592,7 @@ bool FunctionType::isBareCall() const
 	case Kind::BareCallCode:
 	case Kind::BareDelegateCall:
 	case Kind::BareStaticCall:
+	case Kind::BareAuthCall:
 	case Kind::ECRecover:
 	case Kind::SHA256:
 	case Kind::RIPEMD160:
@@ -3780,6 +3786,7 @@ bool FunctionType::padArguments() const
 	case Kind::BareCallCode:
 	case Kind::BareDelegateCall:
 	case Kind::BareStaticCall:
+	case Kind::BareAuthCall:
 	case Kind::SHA256:
 	case Kind::RIPEMD160:
 	case Kind::KECCAK256:
diff --git a/libsolidity/ast/Types.h b/libsolidity/ast/Types.h
index fd1b6a7d3..1334aa26a 100644
--- a/libsolidity/ast/Types.h
+++ b/libsolidity/ast/Types.h
@@ -1254,6 +1254,7 @@ public:
 		BareCallCode, ///< CALLCODE without function hash
 		BareDelegateCall, ///< DELEGATECALL without function hash
 		BareStaticCall, ///< STATICCALL without function hash
+		BareAuthCall, ///< AUTHCALL without function hash
 		Creation, ///< external call using CREATE
 		Send, ///< CALL, but without data and gas
 		Transfer, ///< CALL, but without data and throws on error
@@ -1494,6 +1495,7 @@ public:
 		case FunctionType::Kind::BareCallCode:
 		case FunctionType::Kind::BareDelegateCall:
 		case FunctionType::Kind::BareStaticCall:
+		case FunctionType::Kind::BareAuthCall:
 			return true;
 		default:
 			return false;
diff --git a/libsolidity/codegen/ExpressionCompiler.cpp b/libsolidity/codegen/ExpressionCompiler.cpp
index 517f49c35..fd4e2691e 100644
--- a/libsolidity/codegen/ExpressionCompiler.cpp
+++ b/libsolidity/codegen/ExpressionCompiler.cpp
@@ -727,6 +727,7 @@ bool ExpressionCompiler::visit(FunctionCall const& _functionCall)
 		case FunctionType::Kind::BareCall:
 		case FunctionType::Kind::BareDelegateCall:
 		case FunctionType::Kind::BareStaticCall:
+		case FunctionType::Kind::BareAuthCall:
 			solAssert(!_functionCall.annotation().tryCall, "");
 			[[fallthrough]];
 		case FunctionType::Kind::External:
@@ -1623,6 +1624,7 @@ bool ExpressionCompiler::visit(MemberAccess const& _memberAccess)
 					case FunctionType::Kind::BareCallCode:
 					case FunctionType::Kind::BareDelegateCall:
 					case FunctionType::Kind::BareStaticCall:
+					case FunctionType::Kind::BareAuthCall:
 					case FunctionType::Kind::Transfer:
 					case FunctionType::Kind::ECRecover:
 					case FunctionType::Kind::SHA256:
@@ -1826,7 +1828,7 @@ bool ExpressionCompiler::visit(MemberAccess const& _memberAccess)
 				true
 			);
 		}
-		else if ((std::set<std::string>{"call", "callcode", "delegatecall", "staticcall"}).count(member))
+		else if ((std::set<std::string>{"call", "callcode", "delegatecall", "staticcall", "authcall"}).count(member))
 			utils().convertType(
 				*_memberAccess.expression().annotation().type,
 				*TypeProvider::address(),
@@ -2652,8 +2654,9 @@ void ExpressionCompiler::appendExternalFunctionCall(

 	solAssert(funKind != FunctionType::Kind::BareCallCode, "Callcode has been removed.");

-	bool returnSuccessConditionAndReturndata = funKind == FunctionType::Kind::BareCall || funKind == FunctionType::Kind::BareDelegateCall || funKind == FunctionType::Kind::BareStaticCall;
+	bool returnSuccessConditionAndReturndata = funKind == FunctionType::Kind::BareCall || funKind == FunctionType::Kind::BareDelegateCall || funKind == FunctionType::Kind::BareStaticCall || funKind == FunctionType::Kind::BareAuthCall;
 	bool isDelegateCall = funKind == FunctionType::Kind::BareDelegateCall || funKind == FunctionType::Kind::DelegateCall;
+	bool isAuthCall = funKind == FunctionType::Kind::BareAuthCall;
 	bool useStaticCall = funKind == FunctionType::Kind::BareStaticCall || (_functionType.stateMutability() <= StateMutability::View && m_context.evmVersion().hasStaticCall());

 	if (_tryCall)
@@ -2814,6 +2817,8 @@ void ExpressionCompiler::appendExternalFunctionCall(
 	// Order is important here, STATICCALL might overlap with DELEGATECALL.
 	if (isDelegateCall)
 		m_context << Instruction::DELEGATECALL;
+	else if (isAuthCall)
+		m_context << Instruction::AUTHCALL;
 	else if (useStaticCall)
 		m_context << Instruction::STATICCALL;
 	else
diff --git a/libsolidity/codegen/ReturnInfo.cpp b/libsolidity/codegen/ReturnInfo.cpp
index 28518d9b2..7ddac6312 100644
--- a/libsolidity/codegen/ReturnInfo.cpp
+++ b/libsolidity/codegen/ReturnInfo.cpp
@@ -31,7 +31,8 @@ ReturnInfo::ReturnInfo(EVMVersion const& _evmVersion, FunctionType const& _funct
 	bool const returnSuccessConditionAndReturndata =
 		funKind == FunctionType::Kind::BareCall ||
 		funKind == FunctionType::Kind::BareDelegateCall ||
-		funKind == FunctionType::Kind::BareStaticCall;
+		funKind == FunctionType::Kind::BareStaticCall ||
+		funKind == FunctionType::Kind::BareAuthCall;

 	if (!returnSuccessConditionAndReturndata)
 	{
diff --git a/libsolidity/codegen/ir/IRGeneratorForStatements.cpp b/libsolidity/codegen/ir/IRGeneratorForStatements.cpp
index a5196366f..e09495fb7 100644
--- a/libsolidity/codegen/ir/IRGeneratorForStatements.cpp
+++ b/libsolidity/codegen/ir/IRGeneratorForStatements.cpp
@@ -1040,6 +1040,7 @@ void IRGeneratorForStatements::endVisit(FunctionCall const& _functionCall)
 	case FunctionType::Kind::BareCall:
 	case FunctionType::Kind::BareDelegateCall:
 	case FunctionType::Kind::BareStaticCall:
+	case FunctionType::Kind::BareAuthCall:
 		appendBareCall(_functionCall, arguments);
 		break;
 	case FunctionType::Kind::BareCallCode:
@@ -1803,7 +1804,7 @@ void IRGeneratorForStatements::endVisit(MemberAccess const& _memberAccess)
 			solAssert(dynamic_cast<AddressType const&>(*_memberAccess.expression().annotation().type).stateMutability() == StateMutability::Payable);
 			define(IRVariable{_memberAccess}.part("address"), _memberAccess.expression());
 		}
-		else if (std::set<std::string>{"call", "callcode", "delegatecall", "staticcall"}.count(member))
+		else if (std::set<std::string>{"call", "callcode", "delegatecall", "staticcall", "authcall"}.count(member))
 			define(IRVariable{_memberAccess}.part("address"), _memberAccess.expression());
 		else
 			solAssert(false, "Invalid member access to address");
@@ -2144,6 +2145,7 @@ void IRGeneratorForStatements::endVisit(MemberAccess const& _memberAccess)
 				case FunctionType::Kind::BareCallCode:
 				case FunctionType::Kind::BareDelegateCall:
 				case FunctionType::Kind::BareStaticCall:
+				case FunctionType::Kind::BareAuthCall:
 				case FunctionType::Kind::Transfer:
 				case FunctionType::Kind::ECRecover:
 				case FunctionType::Kind::SHA256:
@@ -2722,7 +2724,8 @@ void IRGeneratorForStatements::appendBareCall(
 	solAssert(
 		funKind == FunctionType::Kind::BareCall ||
 		funKind == FunctionType::Kind::BareDelegateCall ||
-		funKind == FunctionType::Kind::BareStaticCall, ""
+		funKind == FunctionType::Kind::BareStaticCall ||
+		funKind == FunctionType::Kind::BareAuthCall, ""
 	);

 	solAssert(!_functionCall.annotation().tryCall);
@@ -2760,10 +2763,15 @@ void IRGeneratorForStatements::appendBareCall(

 	templ("address", IRVariable(_functionCall.expression()).part("address").name());

-	if (funKind == FunctionType::Kind::BareCall)
+	if (funKind == FunctionType::Kind::BareCall || funKind == FunctionType::Kind::BareAuthCall)
 	{
+		// Both `CALL` & `AUTHCALL` have a `value` field
 		templ("value", funType.valueSet() ? IRVariable(_functionCall.expression()).part("value").name() : "0");
-		templ("call", "call");
+
+		if (funKind == FunctionType::Kind::BareCall)
+			templ("call", "call");
+		else
+			templ("call", "authcall");
 	}
 	else
 	{
diff --git a/libsolidity/codegen/ir/IRGeneratorForStatements.h b/libsolidity/codegen/ir/IRGeneratorForStatements.h
index f4ce2a7d0..a25e1c42b 100644
--- a/libsolidity/codegen/ir/IRGeneratorForStatements.h
+++ b/libsolidity/codegen/ir/IRGeneratorForStatements.h
@@ -162,7 +162,7 @@ private:
 		std::vector<ASTPointer<Expression const>> const& _arguments
 	);

-	/// Appends code for .call / .delegatecall / .staticcall.
+	/// Appends code for .call / .delegatecall / .staticcall / .authcall.
 	/// All involved expressions have already been visited.
 	void appendBareCall(
 		FunctionCall const& _functionCall,
diff --git a/test/tools/yulInterpreter/EVMInstructionInterpreter.cpp b/test/tools/yulInterpreter/EVMInstructionInterpreter.cpp
index 79dbc554a..ddabdb8d3 100644
--- a/test/tools/yulInterpreter/EVMInstructionInterpreter.cpp
+++ b/test/tools/yulInterpreter/EVMInstructionInterpreter.cpp
@@ -351,6 +351,13 @@ u256 EVMInstructionInterpreter::eval(
 			(arg[0] > 0) &&
 			(arg[1] == util::h160::Arith(m_state.address) || (arg[1] & 1))
 		) ? 1 : 0;
+	case Instruction::AUTH:
+		accessMemory(arg[1], arg[2]);
+		return 0;
+	case Instruction::AUTHCALL:
+		accessMemory(arg[4], arg[5]);
+		accessMemory(arg[6], arg[7]);
+		return 0;
 	case Instruction::RETURN:
 	{
 		m_state.returndata = {};
